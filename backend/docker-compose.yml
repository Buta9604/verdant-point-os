version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: verdant-postgres
    environment:
      POSTGRES_USER: verdant
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-verdant_secret_2024}
      POSTGRES_DB: verdant_point
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - verdant-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U verdant -d verdant_point"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: verdant-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secret_2024}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - verdant-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # NestJS Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: verdant-backend
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: 3000
      DATABASE_URL: postgresql://verdant:${POSTGRES_PASSWORD:-verdant_secret_2024}@postgres:5432/verdant_point?schema=public
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secret_2024}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production-super-secret-key-2024}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-24h}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-change-this-refresh-secret-2024}
      JWT_REFRESH_EXPIRES_IN: ${JWT_REFRESH_EXPIRES_IN:-7d}
      PIN_SECRET: ${PIN_SECRET:-pin-secret-2024}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-32-character-encryption-key-here}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - verdant-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs

  # Adminer (Database Management UI) - Optional
  adminer:
    image: adminer:latest
    container_name: verdant-adminer
    ports:
      - "8080:8080"
    networks:
      - verdant-network
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    restart: unless-stopped
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  verdant-network:
    driver: bridge
